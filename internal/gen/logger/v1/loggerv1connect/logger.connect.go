// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: logger/v1/logger.proto

package loggerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/endo-checker/logger/internal/gen/logger/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LoggerServiceName is the fully-qualified name of the LoggerService service.
	LoggerServiceName = "logger.v1.LoggerService"
)

// LoggerServiceClient is a client for the logger.v1.LoggerService service.
type LoggerServiceClient interface {
	// adding new logs.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// quering logs.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// retrieving log.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	// UpdateRequest is used to specify a log to update.
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	// Delete removes logs
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewLoggerServiceClient constructs a client for the logger.v1.LoggerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoggerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LoggerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &loggerServiceClient{
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/logger.v1.LoggerService/Create",
			opts...,
		),
		query: connect_go.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+"/logger.v1.LoggerService/Query",
			opts...,
		),
		get: connect_go.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+"/logger.v1.LoggerService/Get",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+"/logger.v1.LoggerService/Update",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/logger.v1.LoggerService/Delete",
			opts...,
		),
	}
}

// loggerServiceClient implements LoggerServiceClient.
type loggerServiceClient struct {
	create *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	query  *connect_go.Client[v1.QueryRequest, v1.QueryResponse]
	get    *connect_go.Client[v1.GetRequest, v1.GetResponse]
	update *connect_go.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls logger.v1.LoggerService.Create.
func (c *loggerServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Query calls logger.v1.LoggerService.Query.
func (c *loggerServiceClient) Query(ctx context.Context, req *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// Get calls logger.v1.LoggerService.Get.
func (c *loggerServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls logger.v1.LoggerService.Update.
func (c *loggerServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls logger.v1.LoggerService.Delete.
func (c *loggerServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// LoggerServiceHandler is an implementation of the logger.v1.LoggerService service.
type LoggerServiceHandler interface {
	// adding new logs.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// quering logs.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// retrieving log.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	// UpdateRequest is used to specify a log to update.
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	// Delete removes logs
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewLoggerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoggerServiceHandler(svc LoggerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/logger.v1.LoggerService/Create", connect_go.NewUnaryHandler(
		"/logger.v1.LoggerService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/logger.v1.LoggerService/Query", connect_go.NewUnaryHandler(
		"/logger.v1.LoggerService/Query",
		svc.Query,
		opts...,
	))
	mux.Handle("/logger.v1.LoggerService/Get", connect_go.NewUnaryHandler(
		"/logger.v1.LoggerService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/logger.v1.LoggerService/Update", connect_go.NewUnaryHandler(
		"/logger.v1.LoggerService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/logger.v1.LoggerService/Delete", connect_go.NewUnaryHandler(
		"/logger.v1.LoggerService/Delete",
		svc.Delete,
		opts...,
	))
	return "/logger.v1.LoggerService/", mux
}

// UnimplementedLoggerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoggerServiceHandler struct{}

func (UnimplementedLoggerServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("logger.v1.LoggerService.Create is not implemented"))
}

func (UnimplementedLoggerServiceHandler) Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("logger.v1.LoggerService.Query is not implemented"))
}

func (UnimplementedLoggerServiceHandler) Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("logger.v1.LoggerService.Get is not implemented"))
}

func (UnimplementedLoggerServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("logger.v1.LoggerService.Update is not implemented"))
}

func (UnimplementedLoggerServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("logger.v1.LoggerService.Delete is not implemented"))
}
